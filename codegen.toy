def residual_unit(data, num_filter, stride, dim_match, name, bottle_neck,x,y){
	const epsilon = 0.00002;
	bool symbol_true = True;
	bool symbol_false = False;
	const groups = 1;
	const padding = (0, 0);
	string NCHW="NCHW";
	string OIHW="OIHW";

	var bn1 = batch_norm(data,epsilon,symbol_true,x,y);	
	var act1 = relu(bn1);
	var channels1 = num_filter*0.25;
	const kernel_size1 = (3, 3);
	const padding1 = (1, 1);
	var conv1 = conv2d(act1, channels1, groups, kernel_size1, stride, padding, NCHW,OIHW, x, y);
	var bn2 = batch_norm(conv1, epsilon, symbol_false, x, y);
	var act2 = relu(bn2);

	const kernel_size2 = (3, 3);
	const strides2 = (1, 1);
	const padding2 = (1, 1);
	var conv2 = conv2d(act2,num_filter,groups, kernel_size2, strides2, padding2, NCHW,OIHW, x, y);

	var shortcut = data*1;#FIXME
	if(dim_match == symbol_false){
    	const kernel_size3 = (1, 1);
		shortcut = conv2d(act1, num_filter, groups, kernel_size2, stride, padding, NCHW, OIHW, x, y);
	}
	var r = add(conv2, shortcut);
	return(r);
}


def main() {
	string data_name = "data";
	string NCHW="NCHW";
	string OIHW="OIHW";
    const epsilon = 0.00002;
	const zero = 0;
	const data_shape = (1,3,224,224);
	bool symbol_false = False;
    var data = variable(data_name, data_shape);
    var bn_data = batch_norm(data, epsilon, symbol_false, zero, zero);

	var channels1 = filter_list[0];
	const kernel_size1 = (7,7);
	const strides1 = (2,2);
	const padding1 = (3, 3);
	const groups = 1;
	var conv0 = conv2d(data, channels1, groups, kernel_size1, strides1, padding1, NCHW, OIHW, zero, zero);

	return(data);
}

