def Conv(data, num_filter, kernel, stride, pad, name, suffix){
    var ConvName = tuple(name, suffix);
    const epsilon = 0.00002;
	bool symbol_false = False;
    const groups = 1;
	string NCHW="NCHW";
	string OIHW="OIHW";
    string conv_name = "%s%s_conv1";
    var name_conv = conv_name % ConvName;
    var conv = conv2d(data, num_filter, groups, kernel, stride, pad, NCHW, OIHW, name_conv);

    string bn_name = "%s%s_bn";
    var name_bn = bn_name % ConvName;
    var bn = batch_norm(conv, epsilon, symbol_false, name_bn);
    var act = relu(bn);
    return(act);
}

def Pooling(data, kernel, stride, pad, pool_type, name){
    string AVG = "avg";
    bool symbol_true = True;
    var r = max_pool2d(data, kernel, stride, pad);
    if(pool_type == AVG){
        r = avg_pool2d(data, kernel, stride, pad, symbol_true);
    }
    return(r);
}

def Inception7A(data,num_1x1,num_3x3_red, num_3x3_1, num_3x3_2,num_5x5_red, num_5x5,pool, proj,name){
    const kernel=(1, 1);
    const stride=(1, 1);
    const pad=(0, 0);
    string suffix = " ";
    string s_conv = "%s_conv";
    var name_tower_1x1 = s_conv % name;
    var tower_1x1 = Conv(data, num_1x1, kernel, stride, pad, name_tower_1x1, suffix);

    string s_tower = "%s_tower";
    var name_tower = s_tower % name;
    string suffix_tower_5x5 = "_conv";
    var tower_5x5 = Conv(data, num_5x5_red, kernel, stride, pad, name_tower, suffix_tower_5x5);

    const kernel_tower_5x5 = (5, 5);
    const pad_tower_5x5 = (2, 2);
    string suffix_tower_5x5_2 = "_conv_1";
    tower_5x5 = Conv(tower_5x5, num_5x5, kernel_tower_5x5, stride, pad_tower_5x5, name_tower, suffix_tower_5x5_2);

    string s_tower_1 = "s_tower_1";
    var name_tower_1 = s_tower_1 % name;
    string suffix_tower_3x3 = "_conv";
    var tower_3x3 = Conv(data, num_3x3_red, kernel, stride, pad, name_tower_1, suffix_tower_3x3);

    string suffix_tower_3x3_2 = "_conv_1";
    const kernel_5 = (3, 3);
    const pad_5 = (1, 1);
    tower_3x3 = Conv(tower_3x3, num_3x3_1, kernel_5, stride, pad_5, name_tower_1, suffix_tower_3x3_2);
    
    string suffix_tower_3x3_3 = "_conv_2";
    tower_3x3 = Conv(tower_3x3, num_3x3_2, kernel_5, stride, pad_5, name_tower_1,suffix_tower_3x3_3);

    var pool_name = tuple(pool, name);
    string s_pool = "%s_pool_%s_pool";
    var name_pooling = s_pool % pool_name;
    var pooling = Pooling(data, kernel_5, stride, pad_5, pool, name_pooling);

    string s_tower_2 = "s_tower_2";
    var name_tower_2 = s_tower_2 % name;
    string suffix_cproj = "_conv";
    var cproj = Conv(pooling, proj, kernel, stride, pad, name_tower_2, suffix_cproj);

    var concat_tuple = make_tuple(tower_1x1, tower_5x5);
    concat_tuple = append(tower_3x3);
    concat_tuple = append(cproj);
    const axis = 1;
    var concat = concatenate(concat_tuple, axis);
    return(concat);
}

def Inception7B(data,num_3x3,num_d3x3_red, num_d3x3_1, num_d3x3_2,pool,name){
    const kernel_1 = (3, 3);
    const stride_1 = (2, 2);
    const pad_1 = (0, 0);
    string s_conv= "%s_conv";
    var name_1 = s_conv % name;
    string suffix = " ";
    var tower_3x3 = Conv(data, num_3x3, kernel_1, stride_1, pad_1, name_1, suffix);

    const kernel=(1, 1);
    const stride=(1, 1);
    const pad=(0, 0);
    string s_tower = "%s_tower";
    var name_2 = s_tower % name;
    string suffix_2 = "_conv";
    var tower_d3x3 = Conv(data, num_d3x3_red, kernel, stride, pad, name_2, suffix_2);

    const kernel_3 = (3, 3);
    const stride_3 = (1, 1);
    const pad_3 = (1, 1);
    string suffix_3 = "_conv_1";
    tower_d3x3 = Conv(tower_d3x3, num_d3x3_1, kernel_3, stride_3, pad_3, name_2, suffix_3);

    const kernel_4 = (3, 3);
    const stride_4 = (2, 2);
    const pad_4 = (0, 0); 
    string suffix_4 = "_conv_2";   
    tower_d3x3 = Conv(tower_d3x3, num_d3x3_2, kernel_4, stride_4, pad_4, name_2, suffix_4);

    const kernel_5 = (3, 3);
    const stride_5 = (2, 2);
    const pad_5 = (0, 0);
    string pool_type = "max";
    string s_pool = "max_pool_%s_pool";
    var name5 = s_pool % name;
    var pooling = Pooling(data, kernel_5, stride_5, pad_5, pool_type, name5);

    var concat_tuple = make_tuple(tower_3x3, tower_d3x3);
    concat_tuple = append(pooling);
    const axis = 1;    
    var concat = concatenate(concat_tuple, axis);
    return(concat);
}

def Inception7C(data,num_1x1,num_d7_red, num_d7_1, num_d7_2,num_q7_red, num_q7_1, num_q7_2, num_q7_3, num_q7_4,pool, proj,name){
    const stride=(1, 1);
    const kernel = (1, 1);
    const pad = (0, 0);
    string s_conv = "%s_conv";
    var name1 = s_conv % name;
    string suffix = " ";
    var tower_1x1 = Conv(data, num_1x1, kernel, stride, pad, name1, suffix);

    string s_tower = "%s_tower";
    var name2 = s_tower % name;
    string suffix_2 = "_conv";
    var tower_d7 = Conv(data, num_d7_red, kernel, stride, pad, name2, suffix_2);

    const kernel_3 = (1, 7);
    const pad_3 = (0, 3);
    string suffix_3 = "_conv_1";
    tower_d7 = Conv(tower_d7, num_d7_1, kernel_3, stride, pad_3, name2, suffix_3);

    const kernel_4 = (7, 1);
    const pad_4 = (3, 0);
    string suffix_4 = "_conv_2";    
    tower_d7 = Conv(tower_d7, num_d7_2, kernel_4, stride, pad_4, name2, suffix_4);

    string s_tower_1 = "%s_tower_1";
    var name5 = s_tower_1 % name;
    var tower_q7 = Conv(data, num_q7_red, kernel, stride, pad, name5, suffix_2);

    tower_q7 = Conv(tower_q7, num_q7_1, kernel_4, stride, pad_4, name5, suffix_3);

    tower_q7 = Conv(tower_q7, num_q7_2, kernel_3, stride, pad_3, name5, suffix_4);

    string suffix_8 = "_conv_3";
    tower_q7 = Conv(tower_q7, num_q7_3, kernel_4, stride, pad_4, name5, suffix_8);

    string suffix_9 = "_conv_4";
    tower_q7 = Conv(tower_q7, num_q7_4, kernel_3, stride, pad_3, name5, suffix_9);

    const kernel_10 = (3, 3);
    const stride_10 = (1, 1);
    const pad_10 = (1, 1);
    string s_pool = "%s_pool_%s_pool";
    var pool_name = tuple(pool, name);
    var name_10 = s_pool % pool_name;
    var pooling = Pooling(data, kernel_10, stride_10, pad_10, pool, name_10);

    const kernel_11 = (1, 1);
    string s_tower_2 = "%s_tower_2";
    var name_11 = s_tower_2 % name;
    string suffix_11 = "_conv";
    var cproj = Conv(pooling, proj, kernel_11, stride, pad,name_11, suffix_11);

    var concat_tuple = make_tuple(tower_1x1, tower_d7);
    concat_tuple = append(tower_q7);
    concat_tuple = append(cproj);
    const axis = 1;
    var concat = concatenate(concat_tuple, axis);
    return(concat);
}

def Inception7D(data,num_3x3_red, num_3x3,num_d7_3x3_red, num_d7_1, num_d7_2, num_d7_3x3,pool,name){
    const stride=(1, 1);
    const kernel = (1, 1);
    const pad = (0, 0);    
    string s_tower = "%s_tower";
    var name_1 = s_tower % name;
    string suffix_1 = "_conv";
    var tower_3x3 = Conv(data, num_3x3_red, kernel, stride, pad, name_1, suffix_1);

    const kernel_2 = (3, 3);
    const stride_2 = (2, 2);
    const pad_2 = (0, 0);
    string suffix_2 = "_conv_1";
    tower_3x3 = Conv(tower_3x3, num_3x3, kernel_2, stride_2, pad_2, name_1, suffix_2);

    string s_tower_1 = "%s_tower_1";
    var name_3 = s_tower % name;
    string suffix_3 = "_conv";    
    var tower_d7_3x3 = Conv(data, num_d7_3x3_red, kernel, stride, pad, name_3, suffix_3);

    const kernel_4 = (1, 7);
    const pad_4 = (0, 3);
    string suffix_4 = "_conv_1";
    tower_d7_3x3 = Conv(tower_d7_3x3, num_d7_1, kernel_4, stride, pad_4, name_3, suffix_4);

    const kernel_5 = (7, 1);
    const pad_5 = (3, 0);
    string suffix_5 = "_conv_2";
    tower_d7_3x3 = Conv(tower_d7_3x3, num_d7_2, kernel_5, stride, pad_5, name_3, suffix_5);

    const kernel_6 = (3, 3);
    const stride_6 = (2, 2);
    string suffix_6 = "_conv_3";    
    tower_d7_3x3 = Conv(tower_d7_3x3, num_d7_3x3, kernel_6, stride_6, pad, name_3, suffix_6);
    
    const kernel_7 = (3, 3);
    const stride_7 = (2, 2);
    const pad_7 = (0, 0);
    string s_pool = "%s_pool_%s_pool";
    var pool_name = tuple(pool, name);
    var name_7 = s_pool % pool_name;
    var pooling = Pooling(data, kernel_7, stride_7, pool, pad_7, name_7);

    var concat_tuple = make_tuple(tower_3x3, tower_d7_3x3);
    concat_tuple = append(pooling);
    const axis = 1;
    var concat = concatenate(concat_tuple, axis);
    return(concat);
}

def Inception7E(data,num_1x1,num_d3_red, num_d3_1, num_d3_2,num_3x3_d3_red, num_3x3, num_3x3_d3_1, num_3x3_d3_2,pool, proj,name){
    const stride = (1, 1);
    const kernel = (1, 1);
    const pad = (0, 0);       
    string suffix = " ";
    const kernel_1 = (1, 1);
    string s_conv = "%s_conv";
    var name_1 = s_conv % name;
    var tower_1x1 = Conv(data, num_1x1, kernel_1, stride, pad, name_1, suffix);

    string s_tower = "%s_tower";
    var name_2 = s_tower % name;
    string suffix_2 = "_conv";
    var tower_d3 = Conv(data, num_d3_red, kernel, stride, pad, name_2, suffix_2);

    const kernel_3 = (1, 3);
    const pad_3 = (0, 1);
    string suffix_3 = "_mixed_conv";
    var tower_d3_a = Conv(tower_d3, num_d3_1, kernel_3, stride, pad_3, name_2, suffix_3);

    const kernel_4 = (3, 1);
    const pad_4 = (1, 0);
    string suffix_4 = "_mixed_conv_1";    
    var tower_d3_b = Conv(tower_d3, num_d3_2, kernel_4, stride, pad_4, name_2, suffix_4);

    string s_tower_1 = "%s_tower_1";
    var name_5 = s_tower_1 % name;
    string suffix_5 = "_conv";
    var tower_3x3_d3 = Conv(data, num_3x3_d3_red, kernel, stride, pad, name_5, suffix_5);

    const kernel_6 = (3, 3);
    const pad_6 = (1, 1);
    string suffix_6 = "_conv_1";
    tower_3x3_d3 = Conv(tower_3x3_d3, num_3x3, kernel_6, stride, pad_6, name_5, suffix_6);

    const kernel_7 = (1, 3);
    const pad_7 = (0, 1);
    string suffix_7 = "_mixed_conv";    
    var tower_3x3_d3_a = Conv(tower_3x3_d3, num_3x3_d3_1, kernel_7, stride, pad_7, name_5, suffix_7);

    const kernel_8 = (3, 1);
    const pad_8 = (1, 0);
    string suffix_8 = "_mixed_conv_1";   
    var tower_3x3_d3_b = Conv(tower_3x3_d3, num_3x3_d3_2, kernel_8, stride, pad_8, name_5, suffix_8);

    const kernel_9 = (3, 3);
    const stride_9 = (1, 1);
    const pad_9 = (1, 1);
    string s_pool = "%s_pool_%s_pool";
    var pool_name = tuple(pool, name);
    var name_9 = s_pool % pool_name;
    var pooling = Pooling(data, kernel_9, stride_9, pad_9, pool, name_9);

    const kernel_10 = (1, 1);
    string s_tower_2 = "%s_tower_2";
    var name_10 = s_tower_2 % name;
    string suffix_10 = "_conv";
    var cproj = Conv(pooling, proj, kernel_10, stride, pad, name_10, suffix_10);

    var concat_tuple = make_tuple(tower_1x1, tower_d3_a);
    concat_tuple = append(tower_d3_b);
    concat_tuple = append(tower_3x3_d3_a);
    concat_tuple = append(tower_3x3_d3_b);
    concat_tuple = append(cproj);
    const axis = 1;
    var concat = concatenate(concat_tuple, axis);
    return(concat);
}

def main(){
    const data_shape = (1, 3, 299, 299);
    string data_name = "data";
    var data = variable(data_name, data_shape);

    const num_filter_1 = 32;
    const kernel_1 = (3, 3);
    const stride_1 = (2, 2);
    const pad = (0, 0);  
    string name_1 = "conv";
    string suffix = " ";
    var conv = Conv(data, num_filter_1, kernel_1, stride_1, pad, name_1, suffix);

    const num_filter_2 = 32;
    const kernel_2 = (3, 3);
    const stride = (1, 1); 
    string name_2 = "conv_1";
    var conv_1 = Conv(conv, num_filter_2, kernel_2, stride, pad, name_2, suffix);

    const num_filter_3 = 64;
    const kernel_3 = (3, 3);
    const pad_3 = (1, 1); 
    string name_3 = "conv_2";    
    var conv_2 = Conv(conv_1, num_filter_3, kernel=(3, 3), stride, pad_3, name_3, suffix);

    const kernel_4 = (3, 3);
    const stride_4 = (2, 2);
    string pool_type = "max";
    string name_4 = "pool";    
    var pool = Pooling(conv_2, kernel_4, stride_4, pool_type, pad, name_4);

    const num_filter_5 = 80;
    const kernel_5 = (1, 1);
    string name_5 = "conv_3";      
    var conv_3 = Conv(pool, num_filter_5, kernel_5, stride, pad, name_5, suffix);

    const num_filter_6 = 80;
    const kernel_6 = (3, 3);
    string name_6 = "conv_4";     
    var conv_4 = Conv(conv_3, num_filter_6, kernel_6, stride, pad, name_6, suffix);

    string name_7 = "pool1";  
    var pool1 = Pooling(conv_4, kernel_4, stride_4, pool_type, pad, name_7);

    string avg = "avg";
    string mixed = "mixed";
    var in3a = Inception7A(pool1, 64, 64, 96, 96, 48, 64, avg, 32, mixed);

    string mixed_1 = "mixed_1";
    var in3b = Inception7A(in3a, 64, 64, 96, 96, 48, 64, avg, 64, mixed_1);

    string mixed_2 = "mixed_2";
    var in3c = Inception7A(in3b, 64, 64, 96, 96, 48, 64, avg, 64, mixed_2);

    string mixed_3 = "mixed_3";
    string max = "max";
    var in3d = Inception7B(in3c, 384, 64, 96, 96, max, mixed_3);

    string mixed_4 = "mixed_4";
    var in4a = Inception7C(in3d, 192, 128, 128, 192, 128, 128, 128, 128, 192, avg, 192, mixed_4);

    string mixed_5 = "mixed_5";
    var in4b = Inception7C(in4a, 192, 160, 160, 192, 160, 160, 160, 160, 192, avg, 192, mixed_5);

    string mixed_6 = "mixed_6";
    var in4c = Inception7C(in4b, 192, 160, 160, 192, 160, 160, 160, 160, 192, avg, 192, mixed_6);
    
    string mixed_7 = "mixed_7";
    var in4d = Inception7C(in4c, 192, 192, 192, 192, 192, 192, 192, 192, 192, avg, 192, mixed_7);

    string mixed_8 = "mixed_8";
    var in4e = Inception7D(in4d, 192, 320, 192, 192, 192, 192, max, mixed_8);
    
    string mixed_9 = "mixed_9";
    var in5a = Inception7E(in4e, 320, 384, 384, 384, 448, 384, 384, 384, avg, 192, mixed_9);

    string mixed_10 = "mixed_10";
    var in5b = Inception7E(in5a, 320, 384, 384, 384, 448, 384, 384, 384, max, 192, mixed_10);
    
    const kernel_8 = (8, 8);
    const stride_8 = (1, 1);
    string name_8 = "global_pool";
    var pool = Pooling(in5b, kernel_8, stride_8, avg, pad, name_8);

    var flatten = batch_flatten(pool);

    string name_fc1_weight = "fc1_weight";
    string None = "None";
    var fc1_weight = variable(name_fc1_weight, None);
    var fc1 = dense(flatten, fc1_weight, num_classes);

    string name_fc2_bias = "fc2_bias";
    var fc2_bias = variable(name_fc2_bias, None);
    const axis = -1; 
    fc1 = bias_add(fc1, fc2_bias, axis);

    var inception_v3 = softmax(fc1);
    return(inception_v3);
}